// <auto-generated />
using System;
using Estimmo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Estimmo.Data.Migrations
{
    [DbContext(typeof(EstimmoContext))]
    [Migration("20220307095623_Identity")]
    partial class Identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Estimmo.Data.Entities.AdminRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Estimmo.Data.Entities.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geography")
                        .HasColumnName("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RegionId")
                        .HasColumnType("text")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_department");

                    b.HasIndex("Geometry")
                        .HasDatabaseName("ix_department_geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "gist");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_department_region_id");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("Estimmo.Data.Entities.DepartmentAverageValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("RegionId")
                        .HasColumnType("text")
                        .HasColumnName("region_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id", "Type")
                        .HasName("pk_department_average_values");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_department_average_values_region_id");

                    b.ToTable((string)null);

                    b.ToView("department_avg_value");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.DepartmentAverageValueByYear", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<short>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("year");

                    b.Property<string>("RegionId")
                        .HasColumnType("text")
                        .HasColumnName("region_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id", "Type", "Year")
                        .HasName("pk_department_average_values_by_year");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_department_average_values_by_year_region_id");

                    b.ToTable((string)null);

                    b.ToView("department_avg_value_by_year");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.FranceAverageValue", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Type")
                        .HasName("pk_france_average_values");

                    b.ToTable((string)null);

                    b.ToView("france_avg_value");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.FranceAverageValueByYear", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<short>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("year");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Type", "Year")
                        .HasName("pk_france_average_values_by_year");

                    b.ToTable((string)null);

                    b.ToView("france_avg_value_by_year");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_archived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_on");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.HasKey("Id")
                        .HasName("pk_message");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Place", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Geometry>("Geometry")
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParentId")
                        .HasColumnType("text")
                        .HasColumnName("parent_id");

                    b.Property<int?>("ParentType")
                        .HasColumnType("integer")
                        .HasColumnName("parent_type");

                    b.Property<string>("PostCode")
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<string>("SearchName")
                        .HasColumnType("text")
                        .HasColumnName("search_name");

                    b.HasKey("Type", "Id")
                        .HasName("pk_places");

                    b.HasIndex("ParentType", "ParentId")
                        .HasDatabaseName("ix_places_parent_type_parent_id");

                    b.ToTable((string)null);

                    b.ToView("place");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.PropertySale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingSurfaceArea")
                        .HasColumnType("integer")
                        .HasColumnName("building_surface_area");

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geography")
                        .HasColumnName("coordinates");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("LandSurfaceArea")
                        .HasColumnType("integer")
                        .HasColumnName("land_surface_area");

                    b.Property<string>("PostCode")
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<short>("RoomCount")
                        .HasColumnType("smallint")
                        .HasColumnName("room_count");

                    b.Property<string>("SectionId")
                        .HasColumnType("text")
                        .HasColumnName("section_id");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_name");

                    b.Property<short?>("StreetNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("street_number");

                    b.Property<string>("StreetNumberSuffix")
                        .HasColumnType("text")
                        .HasColumnName("street_number_suffix");

                    b.Property<int>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<decimal>("Value")
                        .HasColumnType("money")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_property_sale");

                    b.HasIndex("Coordinates")
                        .HasDatabaseName("ix_property_sale_coordinates");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Coordinates"), "gist");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_property_sale_section_id");

                    b.ToTable("property_sale", (string)null);
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Region", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geography")
                        .HasColumnName("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_region");

                    b.HasIndex("Geometry")
                        .HasDatabaseName("ix_region_geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "gist");

                    b.ToTable("region", (string)null);
                });

            modelBuilder.Entity("Estimmo.Data.Entities.RegionAverageValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id", "Type")
                        .HasName("pk_region_average_values");

                    b.ToTable((string)null);

                    b.ToView("region_avg_value");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.RegionAverageValueByYear", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<short>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("year");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id", "Type", "Year")
                        .HasName("pk_region_average_values_by_year");

                    b.ToTable((string)null);

                    b.ToView("region_avg_value_by_year");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Section", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geography")
                        .HasColumnName("geometry");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.Property<string>("TownId")
                        .HasColumnType("text")
                        .HasColumnName("town_id");

                    b.HasKey("Id")
                        .HasName("pk_section");

                    b.HasIndex("Geometry")
                        .HasDatabaseName("ix_section_geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "gist");

                    b.HasIndex("TownId")
                        .HasDatabaseName("ix_section_town_id");

                    b.ToTable("section", (string)null);
                });

            modelBuilder.Entity("Estimmo.Data.Entities.SectionAverageValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("TownId")
                        .HasColumnType("text")
                        .HasColumnName("town_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id", "Type")
                        .HasName("pk_section_average_value");

                    b.HasIndex("TownId")
                        .HasDatabaseName("ix_section_average_value_town_id");

                    b.ToTable((string)null);

                    b.ToView("section_avg_value");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.SectionAverageValueByYear", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<short>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("year");

                    b.Property<string>("TownId")
                        .HasColumnType("text")
                        .HasColumnName("town_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id", "Type", "Year")
                        .HasName("pk_section_average_value_by_year");

                    b.HasIndex("TownId")
                        .HasDatabaseName("ix_section_average_value_by_year_town_id");

                    b.ToTable((string)null);

                    b.ToView("section_avg_value_by_year");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Town", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department_id");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geography")
                        .HasColumnName("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PostCode")
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.HasKey("Id")
                        .HasName("pk_town");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_town_department_id");

                    b.HasIndex("Geometry")
                        .HasDatabaseName("ix_town_geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "gist");

                    b.ToTable("town", (string)null);
                });

            modelBuilder.Entity("Estimmo.Data.Entities.TownAverageValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text")
                        .HasColumnName("department_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id", "Type")
                        .HasName("pk_town_average_values");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_town_average_values_department_id");

                    b.ToTable((string)null);

                    b.ToView("town_avg_value");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.TownAverageValueByYear", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<short>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("year");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text")
                        .HasColumnName("department_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id", "Type", "Year")
                        .HasName("pk_town_average_values_by_year");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_town_average_values_by_year_department_id");

                    b.ToTable((string)null);

                    b.ToView("town_avg_value_by_year");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claim_role_id");

                    b.ToTable("role_claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claim_user_id");

                    b.ToTable("user_claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_login_user_id");

                    b.ToTable("user_login", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_token");

                    b.ToTable("user_token", (string)null);
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Department", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Region", "Region")
                        .WithMany("Departments")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_department_region_region_id");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.DepartmentAverageValue", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Department", "Department")
                        .WithMany("AverageValues")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_department_average_values_departments_department_id");

                    b.HasOne("Estimmo.Data.Entities.Region", "Region")
                        .WithMany("DepartmentAverageValues")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_department_average_values_regions_region_id");

                    b.Navigation("Department");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.DepartmentAverageValueByYear", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Department", "Department")
                        .WithMany("AverageValuesByYear")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_department_average_values_by_year_departments_department_id");

                    b.HasOne("Estimmo.Data.Entities.Region", "Region")
                        .WithMany("DepartmentAverageValuesByYear")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_department_average_values_by_year_regions_region_id");

                    b.Navigation("Department");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Place", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Place", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentType", "ParentId")
                        .HasConstraintName("fk_places_places_parent_type_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.PropertySale", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Section", "Section")
                        .WithMany("PropertySales")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("fk_property_sale_section_section_id");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.RegionAverageValue", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Region", "Region")
                        .WithMany("AverageValues")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_region_average_values_regions_region_id");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.RegionAverageValueByYear", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Region", "Region")
                        .WithMany("AverageValuesByYear")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_region_average_values_by_year_regions_region_id");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Section", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Town", "Town")
                        .WithMany("Sections")
                        .HasForeignKey("TownId")
                        .HasConstraintName("fk_section_town_town_id");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.SectionAverageValue", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Section", "Section")
                        .WithMany("AverageValues")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_section_average_value_sections_section_id");

                    b.HasOne("Estimmo.Data.Entities.Town", "Town")
                        .WithMany("SectionAverageValues")
                        .HasForeignKey("TownId")
                        .HasConstraintName("fk_section_average_value_towns_town_id");

                    b.Navigation("Section");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.SectionAverageValueByYear", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Section", "Section")
                        .WithMany("AverageValuesByYear")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_section_average_value_by_year_sections_section_id");

                    b.HasOne("Estimmo.Data.Entities.Town", "Town")
                        .WithMany("SectionAverageValuesByYear")
                        .HasForeignKey("TownId")
                        .HasConstraintName("fk_section_average_value_by_year_towns_town_id");

                    b.Navigation("Section");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Town", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Department", "Department")
                        .WithMany("Towns")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_town_department_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.TownAverageValue", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Department", "Department")
                        .WithMany("TownAverageValues")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_town_average_values_departments_department_id");

                    b.HasOne("Estimmo.Data.Entities.Town", "Town")
                        .WithMany("AverageValues")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_town_average_values_towns_town_id");

                    b.Navigation("Department");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.TownAverageValueByYear", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.Department", "Department")
                        .WithMany("TownAverageValuesByYear")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_town_average_values_by_year_departments_department_id");

                    b.HasOne("Estimmo.Data.Entities.Town", "Town")
                        .WithMany("AverageValuesByYear")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_town_average_values_by_year_towns_town_id");

                    b.Navigation("Department");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.AdminRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claim_role_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claim_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_login_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.AdminRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("Estimmo.Data.Entities.AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Estimmo.Data.Entities.AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_token_user_user_id");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Department", b =>
                {
                    b.Navigation("AverageValues");

                    b.Navigation("AverageValuesByYear");

                    b.Navigation("TownAverageValues");

                    b.Navigation("TownAverageValuesByYear");

                    b.Navigation("Towns");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Region", b =>
                {
                    b.Navigation("AverageValues");

                    b.Navigation("AverageValuesByYear");

                    b.Navigation("DepartmentAverageValues");

                    b.Navigation("DepartmentAverageValuesByYear");

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Section", b =>
                {
                    b.Navigation("AverageValues");

                    b.Navigation("AverageValuesByYear");

                    b.Navigation("PropertySales");
                });

            modelBuilder.Entity("Estimmo.Data.Entities.Town", b =>
                {
                    b.Navigation("AverageValues");

                    b.Navigation("AverageValuesByYear");

                    b.Navigation("SectionAverageValues");

                    b.Navigation("SectionAverageValuesByYear");

                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
